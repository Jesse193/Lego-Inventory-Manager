@model AllPart

<div>
    @if (Model != null)
    {
        <th>Number Of Parts: @Html.DisplayFor(modelItem => Model.Count)</th>
        <table class="table table-bordered table-striped table-sm">
            <thead>
                <tr>
                    <th>Quantity</th>
                    <th>Part Name</th>
                    <th>Part Number</th>
                    <th>Part Color Name</th>
                    <th>Part Color ID</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in Model.Results)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => result.Quantity)</td>
                        <td>@Html.DisplayFor(modelItem => result.Part.Name)</td>
                        <td>@Html.DisplayFor(modelItem => result.Part.PartNumber)</td>
                        <td>@Html.DisplayFor(modelItem => result.Color.Name)</td>
                        <td>@Html.DisplayFor(modelItem => result.Color.ColorId)</td>
                        <td><img src=@Html.DisplayFor(modelItem => result.Part.Image) alt="Image of Lego Part" width="200" height="200" /></td>
                    </tr>
                }
            </tbody>
        </table>
        @if (Model.Next != null){
            int userTokenIndexStart = Model.Next.IndexOf("users/") + "users/".Length;
            int userTokenIndexEnd = Model.Next.IndexOf("/all");
            string userToken = Model.Next.Substring(userTokenIndexStart, userTokenIndexEnd - userTokenIndexStart);
            int nextPageIndex = Model.Next.IndexOf("&page=");
            int nextPageNumber = nextPageIndex + 6;
            int nextPage = Int32.Parse(Model.Next.Substring(nextPageNumber, 1));
            <td><button name="nameButton" id="idButton" title="Next Page" class="btn btn-secondary" onclick="location.href='@Url.Action("Index","AllParts", new {  userToken = userToken, page = nextPage })'">Next Page</button></td>
        }
        @if (Model.Previous != null)
        {
            @if (Model.Previous.Contains("page="))
            {
                int userTokenIndexStart = Model.Previous.IndexOf("users/") + "users/".Length;
                int userTokenIndexEnd = Model.Previous.IndexOf("/all");
                string userToken = Model.Previous.Substring(userTokenIndexStart, userTokenIndexEnd - userTokenIndexStart);
                int previousPageIndex = Model.Previous.IndexOf("&page=");
                int previousPageNumber = previousPageIndex + 6;
                int previousPage = Int32.Parse(Model.Previous.Substring(previousPageNumber, 1));
                <td><button name="nameButton" id="idButton" title="Previous Page" class="btn btn-secondary" onclick="location.href='@Url.Action("Index","AllParts", new {  userToken = userToken, page = previousPage })'">Previous Page</button></td>

            }
            else
            {
                int userTokenIndexStart = Model.Previous.IndexOf("users/") + "users/".Length;
                int userTokenIndexEnd = Model.Previous.IndexOf("/all");
                string userToken = Model.Previous.Substring(userTokenIndexStart, userTokenIndexEnd - userTokenIndexStart);
                <td><button name="nameButton" id="idButton" title="Previous Page" class="btn btn-secondary" onclick="location.href='@Url.Action("Index","AllParts", new {  userToken = userToken, page = 1 })'">Previous Page</button></td>
            }
        }
        
    }
</div>